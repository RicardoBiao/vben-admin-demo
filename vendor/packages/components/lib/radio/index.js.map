{"version":3,"file":"index.js","sourceRoot":"lib/","sources":["radio/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,oCAA+D;AAC/D,iDAI+B;AAC/B,gDAA6C;AAC7C,iDAAmD;AAGnD,2BAAwC;AAEhC,IAAA,MAAM,GAAY,sBAAS,OAArB,EAAE,KAAK,GAAK,sBAAS,MAAd,CAAc;AAMnC,IAAM,mBAAmB,GAAG,IAAA,2BAAkB,EAAC,KAAK,EAAE;IACpD,MAAM,EAAE,OAAO;CAChB,CAAC,CAAA;AAEF,IAAM,gBAAgB,GAAG,IAAA,qBAAe,EAAC;IACvC,IAAI,EAAE,YAAY;IAClB,KAAK,EAAE;QACL,OAAO,EAAE;YACP,IAAI,EAAE,KAA6C;YACnD,OAAO,EAAE,cAAM,OAAA,EAAE,EAAF,CAAE;SAClB;QACD,UAAU,EAAE;YACV,IAAI,EAAE,MAAiD;YACvD,OAAO,EAAE,SAAS;SACnB;KACF;IACD,KAAK,EAAL,UAAM,WAA4B,EAAE,EAAgB;YAAd,KAAK,WAAA,EAAE,KAAK,WAAA;QAChD,OAAO;YACL,IAAM,OAAO,GAAG,WAAW,CAAC,OAAO,IAAI,EAAE,CAAA;YACzC,IAAM,UAAU,GACd,WAAW,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,sBAAS,CAAA;YAC1D,IAAM,QAAQ,GACZ,OAAO,CAAC,MAAM,KAAK,CAAC;gBAClB,CAAC,CAAC;oBACE,OAAO,EAAE;wBACP,OAAA,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM;4BACjB,IACE,OAAO,MAAM,KAAK,QAAQ;gCAC1B,OAAO,MAAM,KAAK,QAAQ,EAC1B;gCACA,OAAO,IAAA,OAAC,EACN,UAAU,EACV,EAAE,KAAK,EAAE,MAAM,EAAE,EACjB;oCACE,OAAO,EAAE;;wCAAM,OAAA;4CACb,IAAA,yBAAgB,EAAC,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,mCAAI,MAAM,EAAE,EAAE,MAAM,QAAA,EAAE,CAAC;yCACtD,CAAA;qCAAA;iCACF,CACF,CAAA;6BACF;iCAAM;gCACL,OAAO,IAAA,OAAC,EACN,UAAU,wBAEL,MAAM,KACT,KAAK,EAAE,MAAM,CAAC,KAAK,EACnB,KAAK,EAAE,MAAM,CAAC,KAAK,KAErB;oCACE,OAAO,EAAE;;wCAAM,OAAA;4CACb,IAAA,yBAAgB,EAAC,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,mCAAI,MAAM,CAAC,KAAK,EAAE;gDAC9C,MAAM,QAAA;6CACP,CAAC;yCACH,CAAA;qCAAA;iCACF,CACF,CAAA;6BACF;wBACH,CAAC,CAAC;oBA/BF,CA+BE;iBACL;gBACH,CAAC,CAAC,KAAK,CAAA;YACX,OAAO,IAAA,OAAC,EACN,mBAAmB,eAEd,KAAK,GAEV,QAAQ,CACT,CAAA;QACH,CAAC,CAAA;IACH,CAAC;CACF,CAAC,CAAA;AAEF,IAAM,UAAU,GAAG,IAAA,aAAO,EACxB,gBAAgB,EAChB,IAAA,cAAQ,EAAC,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,EACnC,IAAA,mBAAa,EAAC,0BAAW,CAAC,MAAM,CAAC,CAClC,CAAA;AAEY,QAAA,KAAK,GAAG,IAAA,sBAAa,EAAC,sBAAS,EAAE;IAC5C,KAAK,EAAE,UAAU;CAClB,CAAC,CAAA;AAEF,kBAAe,aAAK,CAAA","sourcesContent":["import { connect, mapProps, mapReadPretty } from '@formily/vue'\r\nimport {\r\n  composeExport,\r\n  transformComponent,\r\n  resolveComponent,\r\n} from '../__builtins__/shared'\r\nimport { PreviewText } from '../preview-text'\r\nimport { Radio as AntdRadio } from 'ant-design-vue'\r\nimport type { RadioGroupProps as AntdRadioGroupProps } from 'ant-design-vue/lib/radio/Group'\r\nimport type { PropType } from 'vue'\r\nimport { defineComponent, h } from 'vue'\r\n\r\nconst { Button, Group } = AntdRadio\r\n\r\nexport type RadioGroupProps = AntdRadioGroupProps & {\r\n  optionType: 'defalt' | 'button'\r\n}\r\n\r\nconst TransformRadioGroup = transformComponent(Group, {\r\n  change: 'input',\r\n})\r\n\r\nconst RadioGroupOption = defineComponent({\r\n  name: 'RadioGroup',\r\n  props: {\r\n    options: {\r\n      type: Array as PropType<RadioGroupProps['options']>,\r\n      default: () => [],\r\n    },\r\n    optionType: {\r\n      type: String as PropType<RadioGroupProps['optionType']>,\r\n      default: 'default',\r\n    },\r\n  },\r\n  setup(customProps: RadioGroupProps, { attrs, slots }) {\r\n    return () => {\r\n      const options = customProps.options || []\r\n      const OptionType =\r\n        customProps.optionType === 'button' ? Button : AntdRadio\r\n      const children =\r\n        options.length !== 0\r\n          ? {\r\n              default: () =>\r\n                options.map((option) => {\r\n                  if (\r\n                    typeof option === 'string' ||\r\n                    typeof option === 'number'\r\n                  ) {\r\n                    return h(\r\n                      OptionType,\r\n                      { value: option },\r\n                      {\r\n                        default: () => [\r\n                          resolveComponent(slots?.option ?? option, { option }),\r\n                        ],\r\n                      }\r\n                    )\r\n                  } else {\r\n                    return h(\r\n                      OptionType,\r\n                      {\r\n                        ...option,\r\n                        value: option.value,\r\n                        label: option.label,\r\n                      },\r\n                      {\r\n                        default: () => [\r\n                          resolveComponent(slots?.option ?? option.label, {\r\n                            option,\r\n                          }),\r\n                        ],\r\n                      }\r\n                    )\r\n                  }\r\n                }),\r\n            }\r\n          : slots\r\n      return h(\r\n        TransformRadioGroup,\r\n        {\r\n          ...attrs,\r\n        },\r\n        children\r\n      )\r\n    }\r\n  },\r\n})\r\n\r\nconst RadioGroup = connect(\r\n  RadioGroupOption,\r\n  mapProps({ dataSource: 'options' }),\r\n  mapReadPretty(PreviewText.Select)\r\n)\r\n\r\nexport const Radio = composeExport(AntdRadio, {\r\n  Group: RadioGroup,\r\n})\r\n\r\nexport default Radio\r\n"]}