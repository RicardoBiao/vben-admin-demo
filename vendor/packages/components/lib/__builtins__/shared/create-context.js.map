{"version":3,"file":"create-context.js","sourceRoot":"lib/","sources":["__builtins__/shared/create-context.ts"],"names":[],"mappings":";;;AAEA,2BAA4E;AAQrE,IAAM,aAAa,GAAG,UAAI,YAAgB;IAC/C,IAAM,SAAS,GAAyB,MAAM,EAAE,CAAA;IAEhD,OAAO;QACL,QAAQ,EAAE,IAAA,qBAAe,EAAC;YACxB,IAAI,EAAE,iBAAiB;YACvB,KAAK,EAAE;gBACL,KAAK,EAAE;oBACL,IAAI,EAAE,IAAI;oBACV,OAAO;wBACL,OAAO,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,IAAI,CAAA;oBAC7B,CAAC;iBACF;aACF;YACD,KAAK,EAAL,UAAM,KAAK,EAAE,EAAS;oBAAP,KAAK,WAAA;gBAClB,IAAM,KAAK,GAAQ,IAAA,WAAK,EAAC,KAAK,EAAE,OAAgB,CAAC,CAAA;gBACjD,IAAA,aAAO,EAAC,SAAS,EAAE,IAAA,cAAQ,EAAC,KAAK,CAAC,CAAC,CAAA;gBAEnC,OAAO,sBAAM,OAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,qDAAI,CAAA,EAAA,CAAA;YACjC,CAAC;SACF,CAAC;QAEF,QAAQ,EAAE,IAAA,qBAAe,EAAC;YACxB,IAAI,EAAE,iBAAiB;YACvB,KAAK,YAAC,MAAM,EAAE,EAAS;oBAAP,KAAK,WAAA;gBACnB,IAAM,KAAK,GAAG,IAAA,YAAM,EAAC,SAAS,CAAC,CAAA;gBAE/B,OAAO,sBAAM,OAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,sDAAG,KAAK,CAAC,CAAA,EAAA,CAAA;YACtC,CAAC;SACF,CAAC;QACF,SAAS,WAAA;KACV,CAAA;AACH,CAAC,CAAA;AAhCY,QAAA,aAAa,iBAgCzB;AAEM,IAAM,UAAU,GAAG,UAAI,OAAyB;IACrD,IAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAA;IAE7B,OAAO,IAAA,YAAM,EAAC,GAAG,EAAE,IAAA,SAAG,EAAC,IAAI,CAAC,CAAC,CAAA;AAC/B,CAAC,CAAA;AAJY,QAAA,UAAU,cAItB","sourcesContent":["import type { DefineComponent } from 'vue'\r\nimport type { InjectionKey, Ref } from 'vue'\r\nimport { defineComponent, provide, inject, readonly, ref, toRef } from 'vue'\r\n\r\nexport type CreateContext<T> = {\r\n  Provider: DefineComponent\r\n  Consumer: DefineComponent\r\n  injectKey: InjectionKey<Ref<T>>\r\n}\r\n\r\nexport const createContext = <T>(defaultValue?: T): CreateContext<T> => {\r\n  const injectKey: InjectionKey<Ref<T>> = Symbol()\r\n\r\n  return {\r\n    Provider: defineComponent({\r\n      name: 'ContextProvider',\r\n      props: {\r\n        value: {\r\n          type: null,\r\n          default() {\r\n            return defaultValue ?? null\r\n          },\r\n        },\r\n      },\r\n      setup(props, { slots }) {\r\n        const value: any = toRef(props, 'value' as never)\r\n        provide(injectKey, readonly(value))\r\n\r\n        return () => slots?.default?.()\r\n      },\r\n    }),\r\n\r\n    Consumer: defineComponent({\r\n      name: 'ContextConsumer',\r\n      setup(_props, { slots }) {\r\n        const value = inject(injectKey)\r\n\r\n        return () => slots?.default?.(value)\r\n      },\r\n    }),\r\n    injectKey,\r\n  }\r\n}\r\n\r\nexport const useContext = <T>(context: CreateContext<T>) => {\r\n  const key = context.injectKey\r\n\r\n  return inject(key, ref(null))\r\n}\r\n"]}