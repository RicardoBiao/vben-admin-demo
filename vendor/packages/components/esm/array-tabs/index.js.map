{"version":3,"file":"index.js","sourceRoot":"lib/","sources":["array-tabs/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { defineComponent, ref, h } from 'vue'\r\nimport { observer } from '@formily/reactive-vue'\r\nimport type { ArrayField } from '@formily/core'\r\nimport { useField, useFieldSchema, RecursionField } from '@formily/vue'\r\nimport { stylePrefix } from '../__builtins__/configs'\r\nimport { Tabs, Badge } from 'ant-design-vue'\r\n\r\nimport type { TabsProps } from 'ant-design-vue/lib/tabs'\r\n\r\nexport const ArrayTabs = observer(\r\n  defineComponent<TabsProps>({\r\n    name: 'ArrayTabs',\r\n    /**\r\n     * 这里加上emit事件，解决[Vue warn]: Invalid prop: type check failed for prop \"onChange\". Expected Function, got Array\r\n     */\r\n    emits: ['change'],\r\n    setup(props, { attrs }) {\r\n      const fieldRef = useField<ArrayField>()\r\n      const schemaRef = useFieldSchema()\r\n\r\n      const prefixCls = `${stylePrefix}-array-tabs`\r\n      const activeKey = ref('tab-0')\r\n\r\n      return () => {\r\n        const field = fieldRef.value\r\n        const schema = schemaRef.value\r\n        const value = Array.isArray(field.value) ? field.value : []\r\n        const dataSource = value?.length ? value : [{}]\r\n\r\n        const onEdit = (targetKey: any, type: 'add' | 'remove') => {\r\n          if (type == 'add') {\r\n            const id = dataSource.length\r\n            if (field?.value?.length) {\r\n              field.push(null)\r\n            } else {\r\n              field.push(null, null)\r\n            }\r\n            activeKey.value = `tab-${id}`\r\n          } else if (type == 'remove') {\r\n            const index = targetKey.match(/-(\\d+)/)?.[1]\r\n            field.remove(Number(index))\r\n            if (activeKey.value === targetKey) {\r\n              activeKey.value = `tab-${index - 1}`\r\n            }\r\n          }\r\n        }\r\n\r\n        const badgedTab = (index: number) => {\r\n          const tab = `${field.title || 'Untitled'} ${index + 1}`\r\n          const path = field.address.concat(index)\r\n          const errors = field.form.queryFeedbacks({\r\n            type: 'error',\r\n            address: `${path}.**`,\r\n          })\r\n          if (errors.length) {\r\n            return h(\r\n              Badge,\r\n              {\r\n                class: `${prefixCls}-errors-badge`,\r\n                count: errors.length,\r\n              },\r\n              {\r\n                default: () => [tab],\r\n              }\r\n            )\r\n          }\r\n          return tab\r\n        }\r\n\r\n        const renderItems = () =>\r\n          dataSource?.map((item, index) => {\r\n            const items = Array.isArray(schema.items)\r\n              ? schema.items[index]\r\n              : schema.items\r\n            const key = `tab-${index}`\r\n            return h(\r\n              Tabs.TabPane,\r\n              {\r\n                key,\r\n                closable: index !== 0,\r\n                name: key,\r\n              },\r\n              {\r\n                default: () =>\r\n                  h(RecursionField, {\r\n                    schema: items,\r\n                    name: index,\r\n                  }),\r\n                tab: () => [badgedTab(index)],\r\n              }\r\n            )\r\n          })\r\n\r\n        return h(\r\n          Tabs,\r\n          {\r\n            ...props,\r\n            ...attrs,\r\n            activeKey: activeKey.value,\r\n            type: 'editable-card',\r\n            onChange: (key) => {\r\n              activeKey.value = key as string\r\n            },\r\n            onEdit: (key, action) => {\r\n              onEdit(key, action)\r\n            },\r\n          },\r\n          {\r\n            default: () => [renderItems()],\r\n          }\r\n        )\r\n      }\r\n    },\r\n  })\r\n)\r\n\r\nexport default ArrayTabs\r\n"]}