{"version":3,"file":"transform-component.js","sourceRoot":"lib/","sources":["__builtins__/shared/transform-component.ts"],"names":[],"mappings":";;;;;;;;;;;AACA,OAAO,EAAE,KAAK,EAAE,MAAM,iBAAiB,CAAA;AACvC,OAAO,EAAE,CAAC,EAAE,eAAe,EAAE,MAAM,KAAK,CAAA;AAIxC,MAAM,CAAC,IAAM,kBAAkB,GAAG,UAChC,GAAQ,EACR,cAAwC,EACxC,YAAyB;IAEzB,OAAO,eAAe,CAAC;QACrB,KAAK,YAAC,KAAK,EAAE,EAAgB;gBAAd,KAAK,WAAA,EAAE,KAAK,WAAA;YACzB,OAAO;gBACL,IAAI,IAAI,gBACH,KAAK,CACT,CAAA;gBACD,IAAI,cAAc,EAAE;oBAClB,IAAM,WAAS,GAAG,cAAc,CAAA;oBAChC,MAAM,CAAC,IAAI,CAAC,WAAS,CAAC,CAAC,OAAO,CAAC,UAAC,OAAO;wBACrC,IAAM,KAAK,GAAG,WAAS,CAAC,OAAO,CAAC,CAAA;wBAChC,IAAI,CAAC,YAAK,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,SAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,CAAC;4BAClD,KAAK,CAAC,YAAK,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,SAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,CAAC,CAAA;oBAC7D,CAAC,CAAC,CAAA;iBACH;gBACD,IAAI,YAAY,EAAE;oBAChB,IAAI,GAAG,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,CAAA;iBACjC;gBACD,OAAO,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;YAC5B,CAAC,CAAA;QACH,CAAC;KACF,CAAC,CAAA;AACJ,CAAC,CAAA","sourcesContent":["import type { Component } from 'vue'\r\nimport { merge } from '@formily/shared'\r\nimport { h, defineComponent } from 'vue'\r\n\r\ntype ListenersTransformRules = Record<string, string>\r\n\r\nexport const transformComponent = <T extends Record<string, any>>(\r\n  tag: any,\r\n  transformRules?: ListenersTransformRules,\r\n  defaultProps?: Partial<T>\r\n): Component<T> | any => {\r\n  return defineComponent({\r\n    setup(props, { attrs, slots }) {\r\n      return () => {\r\n        let data = {\r\n          ...attrs,\r\n        }\r\n        if (transformRules) {\r\n          const listeners = transformRules\r\n          Object.keys(listeners).forEach((extract) => {\r\n            const event = listeners[extract]\r\n            data[`on${event[0].toUpperCase()}${event.slice(1)}`] =\r\n              attrs[`on${extract[0].toUpperCase()}${extract.slice(1)}`]\r\n          })\r\n        }\r\n        if (defaultProps) {\r\n          data = merge(defaultProps, data)\r\n        }\r\n        return h(tag, data, slots)\r\n      }\r\n    },\r\n  })\r\n}\r\n"]}